- rows:
  - id: genetic-algo
    image: genetic_algo.png
    technologies: Python
    supervisor: Asst. Prof. Ali Haydar Özer
    supervisor-url: http://www.ahozer.com
    en:
      title: Genetic Algorithm for MWISP
      parts:
        - name: Genetic Algorithm for MWISP
          github-url: https://github.com/erenulas/genetic-algorithm-MWISP
      description: In <a href="https://en.wikipedia.org/wiki/Independent_set_(graph_theory)" target="_blank">
                      MWISP (Maximum Weighted Independent Set Problem)</a>, it is required to find the maximum independent set of vertices of
                      a given graph such that the sum of the weights of the nodes is maximum.<br><br>
                      <a href="https://en.wikipedia.org/wiki/Genetic_algorithm" target="_blank">Genetic algorithm</a>
                      is a heuristic search algorithm inspired by the ideas of natural selection and genetics.<br><br>
                      In this project, a genetic algorithm was implemented to solve the maximum weighted independent set problem. Users who are
                      using this application can specify some parameters such as the population size, the generation limit, and the mutation and 
                      crossover probabilities to use the genetic algorithm.


  - id: student-assistant-bot
    image: student_assistant_bot.png
    technologies: Python, SQLite, Heroku, BeautifulSoup, Telegram Bot API, Google URL Shortener API
    supervisor: Şakir Bingöl
    supervisor-url: https://www.linkedin.com/in/şakir-bingöl-1716b35a/
    en: 
      title: Student Assistant Bot
      parts:
        - name: Student Assistant Bot
          github-url: https://github.com/erenulas/student-assistant-bot
      description: <a href="https://telegram.org/" target="_blank">Telegram</a> is an open-source, non-profit instant messaging app.<br><br>
                  A <a href="https://en.wikipedia.org/wiki/Chatbot" target="_blank">chatbot</a> is a computer program that can simulate a conversation, 
                  and Telegram supports chatbots. <br><br>
                  <a href="https://t.me/student_mate_bot" target="_blank">Student Assistant Bot</a> checks courses’ websites to figure out if there are any new announcements made. 
                  It can also track the price of a product from e-commerce websites such as 
                  <a href="https://www.teknosa.com/" target="_blank">Teknosa</a>, 
                  <a href="https://www.n11.com/" target="_blank">n11</a>, 
                  <a href="https://www.hepsiburada.com/" target="_blank">GittiGidiyor</a>, 
                  <a href="https://www.hepsiburada.com/" target="_blank">Hepsiburada</a>. 
                  This bot is deployed on <a href="https://www.heroku.com/" target="_blank">Heroku</a> and can be found on Telegram by
                  <a href="https://t.me/student_mate_bot" target="_blank">‘student_mate_bot’</a> username.


  - id: p2p-chat
    image: p2p_chat.png
    technologies: Python, MongoDB
    supervisor: Asst. Prof. Ömer Korçak
    supervisor-url: http://mimoza.marmara.edu.tr/~omer.korcak/
    en:
      title: P2P Chat
      parts:
        - name: P2P Chat
          github-url: https://github.com/erenulas/p2p-chat
      description: In a <a href="https://en.wikipedia.org/wiki/Peer_to_peer_network" target="_blank">P2P (peer to peer)</a> network, end systems are 
                  directly connected to each other.<br> <br>
                  A p2p chat application that is based on a centralized index approach was created. The centralized index
                  server keeps track of the peers in the network and uses <a href="https://en.wikipedia.org/wiki/MongoDB" target="_blank">MongoDB</a> to achieve 
                  it. The index server also controls the timeout status of each peer, and if a peer is inactive for some time, then it will automatically be disconnected.
                  Each user should have a unique username to start a conversation, and a user cannot start another conversation while having one with someone else.
                  Each user has the options to accept or reject the chat requests as well.


                
  - id: ortakbul
    image: ortakbul.png
    technologies: HTML, CSS, JavaScript, AngularJS, Bootstrap, PHP, MySQL
    supervisor: Assoc. Prof. Borahan Tümer
    supervisor-url: http://mimoza.marmara.edu.tr/~borahan.tumer/
    en:
      title: OrtakBul
      parts:
        - name: OrtakBul
          github-url: https://github.com/berkkarabacak/OrtakBul
      description: Investors look for some opportunities to make an investment and originators look for some investment to make their ideas come true.
                  Aim of OrtakBul is to bring both sides together.<br><br> It is a website which allows people to share their ideas, and it also lets 
                  investors to find an idea to make an investment. Investors can send messages to the owner of an idea, and idea owners can make comments 
                  about investors. The website has a search functionality as well, and users can filter the results according to city, budget, etc. 
                  When a new idea is posted or a new investor joins Ortakbul, they are automatically matched according to a number of predefined preferences 
                  such as budget, city, interests.



  - id: paddlify
    image: paddlify.png
    technologies: Java
    supervisor: Asst. Prof. Peter Schüller
    supervisor-url: http://www.peterschueller.com/
    en:
      title: Paddlify
      parts:
        - name: Paddlify
          github-url: https://github.com/berkkarabacak/OrtakBul
      description: Paddlify is a game that the ball moves upwards to hit one or more bricks and bounces back, and the player moves the paddle at the bottom to 
                  prevent the ball from hitting the bottom edge. <br><br>Player can move the paddle 
                  to left, right, or keep it at the same location, and this movement can be done at each second round. If the ball hits one or more bricks, then bricks 
                  disappear, and the ball bounces back. The ball also bounces back if it hits left, right, or top edges of the screen. There are two types 
                  of bricks as X and Y. If the ball hits an X brick, then only that brick disappears. However, if it hits a Y brick, then that brick and all the other 
                  bricks around it disappears. The player loses when the ball hits the bottom edge.


- rows:
  - id: coin-collecting-robot
    image: coin_collecting_robot.png
    technologies: Java
    supervisor: Asst. Prof. Ömer Korçak
    supervisor-url: http://mimoza.marmara.edu.tr/~omer.korcak/
    en:
      title: Coin Collecting Robot
      parts:
        - name: Coin Collecting Robot
          github-url: https://github.com/erenulas/coin-collecting-robot
      description: In coin collecting robot problem, several coins are placed in cells of a board. A robot is placed in the upper left corner and needs to collect as many
                  coins as it can while it is moving to the bottom right cell. At each step, the robot can move either one cell to the right or one cell down from its location.
                  The aim is to find a path to the bottom right corner such that the robot collects the maximum number of coins while it is following that path.<br><br>
                  In this project, modified version of the coin collecting robot problem was implemented with <a href="https://en.wikipedia.org/wiki/Dynamic_programming" 
                  target="_blank">dynamic programming</a> approach, and this modified version of the original problem has some additional constraints. Each cell has an integer
                  between -5 and 5. If the value of a cell is positive, then the robot gains that amount of coins when it visits that cell. If the value of a cell is negative 
                  and the robot has enough coins, then it can pay that amount and visit the cell. Otherwise, robot cannot move to that cell. Cells that are marked with an 
                  'X' are unreachable.



  - id: bmi
    image: bmi.png
    technologies: Java, Android
    supervisor: Assoc. Prof. Ali Fuat Alkaya
    supervisor-url: http://mimoza.marmara.edu.tr/~falkaya/
    en:
      title: BMI Calculator
      parts:
        - name: BMI Calculator
          github-url: https://github.com/erenulas/coin-collecting-robot
      description: <a href="https://en.wikipedia.org/wiki/Body_mass_index" target="_blank"> BMI (body mass index) </a> is equal to the mass divided by the square of height.
                  It indicates whether a person is underweight, overweight, obese or a healthy weight for their height.<br><br>
                  An Android application to calculate a person's body mass index according to the given measurements was developed.



  - id: family-tree
    image: family_tree.png
    technologies: Prolog
    supervisor: Asst. Prof. Fatma Corut Ergin
    supervisor-url: http://mimoza.marmara.edu.tr/~fatma.ergin/
    en:
      title: Family Tree
      parts:
        - name: Family Tree
          github-url: https://github.com/erenulas/PrologFamilyTree
      description: A family tree application to create and manage family trees was implemented. A family tree keeps track of the ancestral hierarchy of the user's family.<br><br>
                  Users can add new members, and update the information of a member added before. A new member is added only as mother, father, or child. Users can ask the 
                  relationship between 2 people. Relationship types (in Turkish) that can be queried are<br><br>
                    <ul>
                      <li>Anne, Baba, Oğul, Kız, Erkek Kardeş, Kız Kardeş, Abla, Abi</li>
                      <li>Amca, Hala, Dayı, Teyze</li>
                      <li>Yeğen, Kuzen</li>
                      <li>Enişte, Yenge</li>
                      <li>Kayınvalide, Kayınpeder, Gelin, Damat</li>
                      <li>Bacanak, Baldız, Elti, Kayınbirader</li>
                    </ul>
                    <span style="font-size:9px">* Another version of this application with the same functionality is implemented in Python as well.</span>



  - id: processor-design
    image: cpu.png
    technologies: Python, Logisim, Verilog
    supervisor: Asst. Prof. Betül Demiroz Boz
    supervisor-url: http://mimoza.marmara.edu.tr/~betul.demiroz/
    en:
      title: Processor Design
      parts:
        - name: Assembler
          github-url: https://github.com/erenulas/Assembler
        - name: Logisim Design
          github-url: https://github.com/erenulas/ProcessorLogisimDesign
        - name: Verilog Design
          github-url: https://github.com/erenulas/ProcessorVerilogDesign
      description: This project was done in 3 steps which are the implementation of the assembler, designing processor using Logisim, and designing processor using Verilog.<br><br>
                  During the first step, <a href="https://en.wikipedia.org/wiki/Instruction_set_architecture" target="_blank">instruction set architecture (ISA)</a> was determined, 
                  and a control unit was designed. After that, an assembler to convert the code written
                  in the assembly language (which is compatible with the decided instruction set architecture) to binary codes was implemented using Python. ISA includes AND, OR,
                  ADD, LD, ST, ANDI, ORI, ADDI, JUMP, PUSH, POP operations.<br><br>
                  In the second step, the processor was designed on <a href="https://en.wikipedia.org/wiki/Logisim" target="_blank">Logisim</a>. The design is compatible with the ISA determined in the first step.<br><br>
                  During the third step, processor was designed using <a href="https://en.wikipedia.org/wiki/Verilog" target="_blank">Verilog</a>. The design is compatible with the ISA determined in the first step.




  - id: car-parts-store
    image: car_parts_store.png
    technologies: Java, JSP, MSSQL, HTML, CSS
    supervisor: None
    supervisor-url: 
    en:
      title: Car Parts Store
      parts:
        - name: Web Interface
          github-url: https://github.com/erenulas/CarPartsStoreWebInterface
        - name: Database
          github-url: https://github.com/erenulas/CarPartsStoreDatabase
        - name: Analysis and ER Diagram
          github-url: https://github.com/erenulas/CarPartsStoreDatabase/wiki 
      description: The aim of this project was to create a website which will allow its users to order some car parts.<br><br>
                  Before the implementation, data and requirement analysis was done, and ER diagram for the database was created. After the development of the database, it was populated with some data and
                  stored procedures, views, and a trigger were created as well. Finally, a web interface with a very limited functionality was implemented.

- rows:
  - id: human-bot-detection
    image: human_bot_detection.png
    technologies: Python, scikit-learn, MongoDB
    supervisor: Dr. Murat Can Ganiz
    supervisor-url: 
    en:
      title: Human Bot Detection
      parts:
        - name: Human Bot Detection
          github-url: https://github.com/erenulas/CSE4095S18_Group8
      description: Bot accounts are one of the most important problems of social networks. Multiple models was created using various ML algorithms
                   to differentiate bot, human, and organizaton accounts. Twitter accounts were tagged, and their tweets were collected and separated into tokens.
                   Then, the following machine learning algorithms were applied on the dataset<br><br>
                   <ul>
                    <li>KMeans Clustering</li>
                    <li>Naive Bayes</li>
                    <li>Decision Tree</li>
                    <li>Support Vector Machines</li>
                    <li>k-Nearest Neighbor</li>
                    <li>Logistic Regression</li>
                   </ul>
                   Three different settings were used for each supervised algorithm and these settings are<br><br>
                   <ul>
                    <li>Whole dataset was used both for training and testing</li>
                    <li>10% of the dataset was used for training and the remaining 90% was used for testing</li>
                    <li>10 fold cross validation was used.</li>
                   </ul>
                   Results were evaluated according to their accuracy, f1, precision, recall, and auc scores.

  - id: cert-verification
    image: cert_verification.png
    technologies: Python, Flask, Bootstrap, HTML, CSS, Java
    supervisor: Dr. Ali Haydar Özer
    supervisor-url: http://www.ahozer.com
    en:
      title: Certificate Verification Using Blockchain
      parts:
        - name: Web Application
          github-url: https://github.com/erenulas/doc-verification-w-blockchain
        - name: Android Application
          github-url: https://github.com/erenulas/doc-verification-w-blockchain-app
      description: A blockchain application was developed to issue and verify certificates. Each certificate can only be issued by the 
                   permitted issuers through the website. Certificate holders can access their own certificates using the Android application.
                   Verification of a certificate can be done through the website by searching the hash string of the block which contains the certificate.

  - id: shell
    image: shell.png
    technologies: C
    supervisor: Dr. Ali Haydar Özer
    supervisor-url: http://www.ahozer.com
    en:
      title: Shell
      parts:
        - name: Shell
          github-url: https://github.com/erenulas/Shell
      description: A simple shell is implemented. Background and foreground processes are supported along with the following commands<br><br>
                  <ul>
                    <li>'cd <destination>' - changes the current directory to <destination></li>
                    <li>'dir' - prints the current working directory</li>
                    <li>'clr' - clears the screen</li>
                    <li>'wait' - waits until all background processes are complete</li>
                    <li>'hist' - prints up to the 10 most recently entered commands in your shell.
                      <ul>
                        <li>'hist -set num' - sets the size of the history buffer to num</li>
                        <li>'! n' - repeats the command that is entered on nth turn (1 for the 1st command in history)</li>
                        <li>'! string' - repeats the command whose first two letter is same as string (cl for clr)</li>
                      </ul>
                    </li>
                    <li>'exit' - terminates shell</li>
                  </ul>
                  This shell also supports the pipe operator if it doesn't involve multiple pipes.

  - id: bfs-dfs
    image: bfs_dfs.png
    technologies: Python
    supervisor: Dr. Ali Haydar Özer
    supervisor-url: http://www.ahozer.com
    en:
      title: Knight's Tour
      parts:
        - name: Knight's Tour
          github-url: https://github.com/erenulas/knights-tour
      description: The knight is a piece in chess which moves like the letter 'L' (two squares horizontally - one square vertically or two squares vertically - one square horizontally).
                   <a href="https://en.wikipedia.org/wiki/Knight%27s_tour" target="_blank">The Knight's tour</a> problem is about determining whether it is possible to find a path such 
                   that the knight visits each square only once or not.<br><br>
                   <a href="https://en.wikipedia.org/wiki/Breadth-first_search" target="_blank">Breadth-first search</a> and 
                   <a href="https://en.wikipedia.org/wiki/Depth-first_search" target="_blank">Depth-first search</a> are traversing algorithms that can be used to search trees or graphs.
                   In Breadth-first search algorithm, tree or graph is searched level by level starting from the root. 
                   However, in the latter one, the deepest node of each branch is visited first. Then, the remaining nodes are explored by backtracking.<br><br>
                   In this project, a bfs and a dfs algorithms are implemented to find a knight's tour. A modified version of dfs is implemented as well. In the modified version, 
                   dfs is combined with a node selection heuristic to improve the depth-first search algorithm's performance.


  - id: erenulas
    image: erenulas.png
    technologies: Bootstrap, HTML, CSS, Sass, Jekyll, GitHub Pages
    supervisor: None
    supervisor-url: 
    en:
      title: Portfolio Website
      parts:
        - name: Portfolio
          github-url: https://github.com/erenulas/erenulas.github.io
      description: <a href="https://pages.github.com" target="_blank">Github Pages</a> is a hosting service designed to host static web pages directly from a repository.
                   <a href="https://jekyllrb.com" target="_blank">Jekyll</a> is a static site generator.<br><br>
                   By using these two tools, I've built a portfolio website to display my projects and introduce myself.